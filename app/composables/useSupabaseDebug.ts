export const useSupabaseDebug = () => {
  const { $supabase } = useNuxtApp() as any

  const testConnection = async () => {
    try {
      console.log('üîÑ Testando conex√£o com Supabase...')
      
      // Verificar configura√ß√µes
      const config = useRuntimeConfig()
      console.log('‚öôÔ∏è Configura√ß√µes do runtime:', {
        supabaseUrl: config.public.supabaseUrl ? 'Configurado ‚úÖ' : 'N√£o configurado ‚ùå',
        supabaseKey: config.public.supabaseKey ? 'Configurado ‚úÖ' : 'N√£o configurado ‚ùå'
      })
      
      console.log('üîó Supabase client:', $supabase)
      
      // Teste b√°sico de conex√£o
      const { data, error } = await $supabase
        .from('funcionarios')
        .select('count', { count: 'exact', head: true })
      
      if (error) {
        console.error('‚ùå Erro na conex√£o:', error)
        console.error('‚ùå Detalhes completos do erro:', {
          message: error.message,
          details: error.details,
          hint: error.hint,
          code: error.code
        })
        return { success: false, error: error.message }
      }
      
      console.log('‚úÖ Conex√£o com Supabase OK!')
      console.log(`üìä Total de funcion√°rios na tabela: ${data}`)
      
      return { success: true, count: data }
    } catch (err) {
      console.error('‚ùå Erro inesperado:', err)
      return { success: false, error: 'Erro inesperado na conex√£o' }
    }
  }

  const testAuth = async () => {
    try {
      console.log('üîÑ Testando autentica√ß√£o...')
      
      const { data: { session } } = await $supabase.auth.getSession()
      
      if (session?.user) {
        console.log('‚úÖ Usu√°rio autenticado:', session.user.email)
        return { success: true, user: session.user }
      } else {
        console.log('‚ö†Ô∏è Nenhum usu√°rio autenticado')
        return { success: false, error: 'Usu√°rio n√£o autenticado' }
      }
    } catch (err) {
      console.error('‚ùå Erro na verifica√ß√£o de autentica√ß√£o:', err)
      return { success: false, error: 'Erro na verifica√ß√£o de autentica√ß√£o' }
    }
  }

  return {
    testConnection,
    testAuth
  }
}